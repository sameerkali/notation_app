{"ast":null,"code":"/** @license React v0.13.6\r\n * scheduler-tracing.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\n    // In some cases, StrictMode should also double-render lifecycles.\n    // This can be confusing for tests though,\n    // And it can be bad for performance in production.\n    // This feature flag can be used to control the behavior:\n    // To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n    // replay the begin phase of a failed component inside invokeGuardedCallback.\n    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\n    // Gather advanced timing metrics for Profiler subtrees.\n    // Trace which interactions trigger each commit.\n\n    var enableSchedulerTracing = true; // Only used in www builds.\n    // TODO: true? Here it might just be false.\n    // Only used in www builds.\n    // Only used in www builds.\n    // React Fire: prevent the value and checked attributes from syncing\n    // with their related DOM properties\n    // These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\n    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\n\n    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.\n\n    var interactionIDCounter = 0;\n    var threadIDCounter = 0; // Set of currently traced interactions.\n    // Interactions \"stack\"–\n    // Meaning that newly traced interactions are appended to the previously active set.\n    // When an interaction goes out of scope, the previous set (if any) is restored.\n\n    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.\n\n    exports.__subscriberRef = null;\n\n    if (enableSchedulerTracing) {\n      exports.__interactionsRef = {\n        current: new Set()\n      };\n      exports.__subscriberRef = {\n        current: null\n      };\n    }\n\n    function unstable_clear(callback) {\n      if (!enableSchedulerTracing) {\n        return callback();\n      }\n\n      var prevInteractions = exports.__interactionsRef.current;\n      exports.__interactionsRef.current = new Set();\n\n      try {\n        return callback();\n      } finally {\n        exports.__interactionsRef.current = prevInteractions;\n      }\n    }\n\n    function unstable_getCurrent() {\n      if (!enableSchedulerTracing) {\n        return null;\n      } else {\n        return exports.__interactionsRef.current;\n      }\n    }\n\n    function unstable_getThreadID() {\n      return ++threadIDCounter;\n    }\n\n    function unstable_trace(name, timestamp, callback) {\n      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\n\n      if (!enableSchedulerTracing) {\n        return callback();\n      }\n\n      var interaction = {\n        __count: 1,\n        id: interactionIDCounter++,\n        name: name,\n        timestamp: timestamp\n      };\n      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.\n      // To do that, clone the current interactions.\n      // The previous set will be restored upon completion.\n\n      var interactions = new Set(prevInteractions);\n      interactions.add(interaction);\n      exports.__interactionsRef.current = interactions;\n      var subscriber = exports.__subscriberRef.current;\n      var returnValue = void 0;\n\n      try {\n        if (subscriber !== null) {\n          subscriber.onInteractionTraced(interaction);\n        }\n      } finally {\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkStarted(interactions, threadID);\n          }\n        } finally {\n          try {\n            returnValue = callback();\n          } finally {\n            exports.__interactionsRef.current = prevInteractions;\n\n            try {\n              if (subscriber !== null) {\n                subscriber.onWorkStopped(interactions, threadID);\n              }\n            } finally {\n              interaction.__count--; // If no async work was scheduled for this interaction,\n              // Notify subscribers that it's completed.\n\n              if (subscriber !== null && interaction.__count === 0) {\n                subscriber.onInteractionScheduledWorkCompleted(interaction);\n              }\n            }\n          }\n        }\n      }\n\n      return returnValue;\n    }\n\n    function unstable_wrap(callback) {\n      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\n\n      if (!enableSchedulerTracing) {\n        return callback;\n      }\n\n      var wrappedInteractions = exports.__interactionsRef.current;\n      var subscriber = exports.__subscriberRef.current;\n\n      if (subscriber !== null) {\n        subscriber.onWorkScheduled(wrappedInteractions, threadID);\n      } // Update the pending async work count for the current interactions.\n      // Update after calling subscribers in case of error.\n\n\n      wrappedInteractions.forEach(function (interaction) {\n        interaction.__count++;\n      });\n      var hasRun = false;\n\n      function wrapped() {\n        var prevInteractions = exports.__interactionsRef.current;\n        exports.__interactionsRef.current = wrappedInteractions;\n        subscriber = exports.__subscriberRef.current;\n\n        try {\n          var returnValue = void 0;\n\n          try {\n            if (subscriber !== null) {\n              subscriber.onWorkStarted(wrappedInteractions, threadID);\n            }\n          } finally {\n            try {\n              returnValue = callback.apply(undefined, arguments);\n            } finally {\n              exports.__interactionsRef.current = prevInteractions;\n\n              if (subscriber !== null) {\n                subscriber.onWorkStopped(wrappedInteractions, threadID);\n              }\n            }\n          }\n\n          return returnValue;\n        } finally {\n          if (!hasRun) {\n            // We only expect a wrapped function to be executed once,\n            // But in the event that it's executed more than once–\n            // Only decrement the outstanding interaction counts once.\n            hasRun = true; // Update pending async counts for all wrapped interactions.\n            // If this was the last scheduled async work for any of them,\n            // Mark them as completed.\n\n            wrappedInteractions.forEach(function (interaction) {\n              interaction.__count--;\n\n              if (subscriber !== null && interaction.__count === 0) {\n                subscriber.onInteractionScheduledWorkCompleted(interaction);\n              }\n            });\n          }\n        }\n      }\n\n      wrapped.cancel = function cancel() {\n        subscriber = exports.__subscriberRef.current;\n\n        try {\n          if (subscriber !== null) {\n            subscriber.onWorkCanceled(wrappedInteractions, threadID);\n          }\n        } finally {\n          // Update pending async counts for all wrapped interactions.\n          // If this was the last scheduled async work for any of them,\n          // Mark them as completed.\n          wrappedInteractions.forEach(function (interaction) {\n            interaction.__count--;\n\n            if (subscriber && interaction.__count === 0) {\n              subscriber.onInteractionScheduledWorkCompleted(interaction);\n            }\n          });\n        }\n      };\n\n      return wrapped;\n    }\n\n    var subscribers = null;\n\n    if (enableSchedulerTracing) {\n      subscribers = new Set();\n    }\n\n    function unstable_subscribe(subscriber) {\n      if (enableSchedulerTracing) {\n        subscribers.add(subscriber);\n\n        if (subscribers.size === 1) {\n          exports.__subscriberRef.current = {\n            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\n            onInteractionTraced: onInteractionTraced,\n            onWorkCanceled: onWorkCanceled,\n            onWorkScheduled: onWorkScheduled,\n            onWorkStarted: onWorkStarted,\n            onWorkStopped: onWorkStopped\n          };\n        }\n      }\n    }\n\n    function unstable_unsubscribe(subscriber) {\n      if (enableSchedulerTracing) {\n        subscribers.delete(subscriber);\n\n        if (subscribers.size === 0) {\n          exports.__subscriberRef.current = null;\n        }\n      }\n    }\n\n    function onInteractionTraced(interaction) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onInteractionTraced(interaction);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onInteractionScheduledWorkCompleted(interaction) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onInteractionScheduledWorkCompleted(interaction);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkScheduled(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkScheduled(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkStarted(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkStarted(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkStopped(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkStopped(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    function onWorkCanceled(interactions, threadID) {\n      var didCatchError = false;\n      var caughtError = null;\n      subscribers.forEach(function (subscriber) {\n        try {\n          subscriber.onWorkCanceled(interactions, threadID);\n        } catch (error) {\n          if (!didCatchError) {\n            didCatchError = true;\n            caughtError = error;\n          }\n        }\n      });\n\n      if (didCatchError) {\n        throw caughtError;\n      }\n    }\n\n    exports.unstable_clear = unstable_clear;\n    exports.unstable_getCurrent = unstable_getCurrent;\n    exports.unstable_getThreadID = unstable_getThreadID;\n    exports.unstable_trace = unstable_trace;\n    exports.unstable_wrap = unstable_wrap;\n    exports.unstable_subscribe = unstable_subscribe;\n    exports.unstable_unsubscribe = unstable_unsubscribe;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","enableSchedulerTracing","DEFAULT_THREAD_ID","interactionIDCounter","threadIDCounter","__interactionsRef","__subscriberRef","current","Set","unstable_clear","callback","prevInteractions","unstable_getCurrent","unstable_getThreadID","unstable_trace","name","timestamp","threadID","arguments","length","undefined","interaction","__count","id","interactions","add","subscriber","returnValue","onInteractionTraced","onWorkStarted","onWorkStopped","onInteractionScheduledWorkCompleted","unstable_wrap","wrappedInteractions","onWorkScheduled","forEach","hasRun","wrapped","apply","cancel","onWorkCanceled","subscribers","unstable_subscribe","size","unstable_unsubscribe","delete","didCatchError","caughtError","error"],"sources":["C:/Users/Administrator/Documents/GitHub/notation_app/node_modules/scheduler/cjs/scheduler-tracing.development.js"],"sourcesContent":["/** @license React v0.13.6\r\n * scheduler-tracing.development.js\r\n *\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  (function() {\r\n'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\n// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\r\n\r\n\r\n// In some cases, StrictMode should also double-render lifecycles.\r\n// This can be confusing for tests though,\r\n// And it can be bad for performance in production.\r\n// This feature flag can be used to control the behavior:\r\n\r\n\r\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\r\n// replay the begin phase of a failed component inside invokeGuardedCallback.\r\n\r\n\r\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\r\n\r\n\r\n// Gather advanced timing metrics for Profiler subtrees.\r\n\r\n\r\n// Trace which interactions trigger each commit.\r\nvar enableSchedulerTracing = true;\r\n\r\n// Only used in www builds.\r\n // TODO: true? Here it might just be false.\r\n\r\n// Only used in www builds.\r\n\r\n\r\n// Only used in www builds.\r\n\r\n\r\n// React Fire: prevent the value and checked attributes from syncing\r\n// with their related DOM properties\r\n\r\n\r\n// These APIs will no longer be \"unstable\" in the upcoming 16.7 release,\r\n// Control this behavior with a flag to support 16.6 minor releases in the meanwhile.\r\n\r\nvar DEFAULT_THREAD_ID = 0;\r\n\r\n// Counters used to generate unique IDs.\r\nvar interactionIDCounter = 0;\r\nvar threadIDCounter = 0;\r\n\r\n// Set of currently traced interactions.\r\n// Interactions \"stack\"–\r\n// Meaning that newly traced interactions are appended to the previously active set.\r\n// When an interaction goes out of scope, the previous set (if any) is restored.\r\nexports.__interactionsRef = null;\r\n\r\n// Listener(s) to notify when interactions begin and end.\r\nexports.__subscriberRef = null;\r\n\r\nif (enableSchedulerTracing) {\r\n  exports.__interactionsRef = {\r\n    current: new Set()\r\n  };\r\n  exports.__subscriberRef = {\r\n    current: null\r\n  };\r\n}\r\n\r\nfunction unstable_clear(callback) {\r\n  if (!enableSchedulerTracing) {\r\n    return callback();\r\n  }\r\n\r\n  var prevInteractions = exports.__interactionsRef.current;\r\n  exports.__interactionsRef.current = new Set();\r\n\r\n  try {\r\n    return callback();\r\n  } finally {\r\n    exports.__interactionsRef.current = prevInteractions;\r\n  }\r\n}\r\n\r\nfunction unstable_getCurrent() {\r\n  if (!enableSchedulerTracing) {\r\n    return null;\r\n  } else {\r\n    return exports.__interactionsRef.current;\r\n  }\r\n}\r\n\r\nfunction unstable_getThreadID() {\r\n  return ++threadIDCounter;\r\n}\r\n\r\nfunction unstable_trace(name, timestamp, callback) {\r\n  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;\r\n\r\n  if (!enableSchedulerTracing) {\r\n    return callback();\r\n  }\r\n\r\n  var interaction = {\r\n    __count: 1,\r\n    id: interactionIDCounter++,\r\n    name: name,\r\n    timestamp: timestamp\r\n  };\r\n\r\n  var prevInteractions = exports.__interactionsRef.current;\r\n\r\n  // Traced interactions should stack/accumulate.\r\n  // To do that, clone the current interactions.\r\n  // The previous set will be restored upon completion.\r\n  var interactions = new Set(prevInteractions);\r\n  interactions.add(interaction);\r\n  exports.__interactionsRef.current = interactions;\r\n\r\n  var subscriber = exports.__subscriberRef.current;\r\n  var returnValue = void 0;\r\n\r\n  try {\r\n    if (subscriber !== null) {\r\n      subscriber.onInteractionTraced(interaction);\r\n    }\r\n  } finally {\r\n    try {\r\n      if (subscriber !== null) {\r\n        subscriber.onWorkStarted(interactions, threadID);\r\n      }\r\n    } finally {\r\n      try {\r\n        returnValue = callback();\r\n      } finally {\r\n        exports.__interactionsRef.current = prevInteractions;\r\n\r\n        try {\r\n          if (subscriber !== null) {\r\n            subscriber.onWorkStopped(interactions, threadID);\r\n          }\r\n        } finally {\r\n          interaction.__count--;\r\n\r\n          // If no async work was scheduled for this interaction,\r\n          // Notify subscribers that it's completed.\r\n          if (subscriber !== null && interaction.__count === 0) {\r\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return returnValue;\r\n}\r\n\r\nfunction unstable_wrap(callback) {\r\n  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;\r\n\r\n  if (!enableSchedulerTracing) {\r\n    return callback;\r\n  }\r\n\r\n  var wrappedInteractions = exports.__interactionsRef.current;\r\n\r\n  var subscriber = exports.__subscriberRef.current;\r\n  if (subscriber !== null) {\r\n    subscriber.onWorkScheduled(wrappedInteractions, threadID);\r\n  }\r\n\r\n  // Update the pending async work count for the current interactions.\r\n  // Update after calling subscribers in case of error.\r\n  wrappedInteractions.forEach(function (interaction) {\r\n    interaction.__count++;\r\n  });\r\n\r\n  var hasRun = false;\r\n\r\n  function wrapped() {\r\n    var prevInteractions = exports.__interactionsRef.current;\r\n    exports.__interactionsRef.current = wrappedInteractions;\r\n\r\n    subscriber = exports.__subscriberRef.current;\r\n\r\n    try {\r\n      var returnValue = void 0;\r\n\r\n      try {\r\n        if (subscriber !== null) {\r\n          subscriber.onWorkStarted(wrappedInteractions, threadID);\r\n        }\r\n      } finally {\r\n        try {\r\n          returnValue = callback.apply(undefined, arguments);\r\n        } finally {\r\n          exports.__interactionsRef.current = prevInteractions;\r\n\r\n          if (subscriber !== null) {\r\n            subscriber.onWorkStopped(wrappedInteractions, threadID);\r\n          }\r\n        }\r\n      }\r\n\r\n      return returnValue;\r\n    } finally {\r\n      if (!hasRun) {\r\n        // We only expect a wrapped function to be executed once,\r\n        // But in the event that it's executed more than once–\r\n        // Only decrement the outstanding interaction counts once.\r\n        hasRun = true;\r\n\r\n        // Update pending async counts for all wrapped interactions.\r\n        // If this was the last scheduled async work for any of them,\r\n        // Mark them as completed.\r\n        wrappedInteractions.forEach(function (interaction) {\r\n          interaction.__count--;\r\n\r\n          if (subscriber !== null && interaction.__count === 0) {\r\n            subscriber.onInteractionScheduledWorkCompleted(interaction);\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  wrapped.cancel = function cancel() {\r\n    subscriber = exports.__subscriberRef.current;\r\n\r\n    try {\r\n      if (subscriber !== null) {\r\n        subscriber.onWorkCanceled(wrappedInteractions, threadID);\r\n      }\r\n    } finally {\r\n      // Update pending async counts for all wrapped interactions.\r\n      // If this was the last scheduled async work for any of them,\r\n      // Mark them as completed.\r\n      wrappedInteractions.forEach(function (interaction) {\r\n        interaction.__count--;\r\n\r\n        if (subscriber && interaction.__count === 0) {\r\n          subscriber.onInteractionScheduledWorkCompleted(interaction);\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return wrapped;\r\n}\r\n\r\nvar subscribers = null;\r\nif (enableSchedulerTracing) {\r\n  subscribers = new Set();\r\n}\r\n\r\nfunction unstable_subscribe(subscriber) {\r\n  if (enableSchedulerTracing) {\r\n    subscribers.add(subscriber);\r\n\r\n    if (subscribers.size === 1) {\r\n      exports.__subscriberRef.current = {\r\n        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,\r\n        onInteractionTraced: onInteractionTraced,\r\n        onWorkCanceled: onWorkCanceled,\r\n        onWorkScheduled: onWorkScheduled,\r\n        onWorkStarted: onWorkStarted,\r\n        onWorkStopped: onWorkStopped\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nfunction unstable_unsubscribe(subscriber) {\r\n  if (enableSchedulerTracing) {\r\n    subscribers.delete(subscriber);\r\n\r\n    if (subscribers.size === 0) {\r\n      exports.__subscriberRef.current = null;\r\n    }\r\n  }\r\n}\r\n\r\nfunction onInteractionTraced(interaction) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onInteractionTraced(interaction);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nfunction onInteractionScheduledWorkCompleted(interaction) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onInteractionScheduledWorkCompleted(interaction);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nfunction onWorkScheduled(interactions, threadID) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onWorkScheduled(interactions, threadID);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nfunction onWorkStarted(interactions, threadID) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onWorkStarted(interactions, threadID);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nfunction onWorkStopped(interactions, threadID) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onWorkStopped(interactions, threadID);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nfunction onWorkCanceled(interactions, threadID) {\r\n  var didCatchError = false;\r\n  var caughtError = null;\r\n\r\n  subscribers.forEach(function (subscriber) {\r\n    try {\r\n      subscriber.onWorkCanceled(interactions, threadID);\r\n    } catch (error) {\r\n      if (!didCatchError) {\r\n        didCatchError = true;\r\n        caughtError = error;\r\n      }\r\n    }\r\n  });\r\n\r\n  if (didCatchError) {\r\n    throw caughtError;\r\n  }\r\n}\r\n\r\nexports.unstable_clear = unstable_clear;\r\nexports.unstable_getCurrent = unstable_getCurrent;\r\nexports.unstable_getThreadID = unstable_getThreadID;\r\nexports.unstable_trace = unstable_trace;\r\nexports.unstable_wrap = unstable_wrap;\r\nexports.unstable_subscribe = unstable_subscribe;\r\nexports.unstable_unsubscribe = unstable_unsubscribe;\r\n  })();\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}