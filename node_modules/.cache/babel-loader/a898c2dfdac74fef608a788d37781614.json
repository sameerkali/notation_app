{"ast":null,"code":"// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nvar hadKeyboardEvent = true;\nvar hadFocusVisibleRecently = false;\nvar hadFocusVisibleRecentlyTimeout = null;\nvar inputTypesWhitelist = {\n  text: true,\n  search: true,\n  url: true,\n  tel: true,\n  email: true,\n  password: true,\n  number: true,\n  date: true,\n  month: true,\n  week: true,\n  time: true,\n  datetime: true,\n  'datetime-local': true\n};\n/**\r\n * Computes whether the given element should automatically trigger the\r\n * `focus-visible` class being added, i.e. whether it should always match\r\n * `:focus-visible` when focused.\r\n * @param {Element} node\r\n * @return {boolean}\r\n */\n\nfunction focusTriggersKeyboardModality(node) {\n  var type = node.type,\n      tagName = node.tagName;\n\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\n    return true;\n  }\n\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\n    return true;\n  }\n\n  if (node.isContentEditable) {\n    return true;\n  }\n\n  return false;\n}\n/**\r\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\r\n * If the most recent user interaction was via the keyboard;\r\n * and the key press did not include a meta, alt/option, or control key;\r\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\r\n * @param {KeyboardEvent} event\r\n */\n\n\nfunction handleKeyDown(event) {\n  if (event.metaKey || event.altKey || event.ctrlKey) {\n    return;\n  }\n\n  hadKeyboardEvent = true;\n}\n/**\r\n * If at any point a user clicks with a pointing device, ensure that we change\r\n * the modality away from keyboard.\r\n * This avoids the situation where a user presses a key on an already focused\r\n * element, and then clicks on a different element, focusing it with a\r\n * pointing device, while we still think we're in keyboard modality.\r\n */\n\n\nfunction handlePointerDown() {\n  hadKeyboardEvent = false;\n}\n\nfunction handleVisibilityChange() {\n  if (this.visibilityState === 'hidden') {\n    // If the tab becomes active again, the browser will handle calling focus\n    // on the element (Safari actually calls it twice).\n    // If this tab change caused a blur on an element with focus-visible,\n    // re-apply the class when the user switches back to the tab.\n    if (hadFocusVisibleRecently) {\n      hadKeyboardEvent = true;\n    }\n  }\n}\n\nfunction prepare(ownerDocument) {\n  ownerDocument.addEventListener('keydown', handleKeyDown, true);\n  ownerDocument.addEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.addEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.addEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nexport function teardown(ownerDocument) {\n  ownerDocument.removeEventListener('keydown', handleKeyDown, true);\n  ownerDocument.removeEventListener('mousedown', handlePointerDown, true);\n  ownerDocument.removeEventListener('pointerdown', handlePointerDown, true);\n  ownerDocument.removeEventListener('touchstart', handlePointerDown, true);\n  ownerDocument.removeEventListener('visibilitychange', handleVisibilityChange, true);\n}\n\nfunction isFocusVisible(event) {\n  var target = event.target;\n\n  try {\n    return target.matches(':focus-visible');\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\n  // we use our own heuristic for those browsers\n  // rethrow might be better if it's not the expected error but do we really\n  // want to crash if focus-visible malfunctioned?\n  // no need for validFocusTarget check. the user does that by attaching it to\n  // focusable events only\n\n\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\n}\n/**\r\n * Should be called if a blur event is fired on a focus-visible element\r\n */\n\n\nfunction handleBlurVisible() {\n  // To detect a tab/window switch, we look for a blur event followed\n  // rapidly by a visibility change.\n  // If we don't see a visibility change within 100ms, it's probably a\n  // regular focus change.\n  hadFocusVisibleRecently = true;\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\n    hadFocusVisibleRecently = false;\n  }, 100);\n}\n\nexport function useIsFocusVisible() {\n  var ref = React.useCallback(function (instance) {\n    var node = ReactDOM.findDOMNode(instance);\n\n    if (node != null) {\n      prepare(node.ownerDocument);\n    }\n  }, []);\n  return {\n    isFocusVisible: isFocusVisible,\n    onBlurVisible: handleBlurVisible,\n    ref: ref\n  };\n}","map":{"version":3,"names":["React","ReactDOM","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesWhitelist","text","search","url","tel","email","password","number","date","month","week","time","datetime","focusTriggersKeyboardModality","node","type","tagName","readOnly","isContentEditable","handleKeyDown","event","metaKey","altKey","ctrlKey","handlePointerDown","handleVisibilityChange","visibilityState","prepare","ownerDocument","addEventListener","teardown","removeEventListener","isFocusVisible","target","matches","error","handleBlurVisible","window","clearTimeout","setTimeout","useIsFocusVisible","ref","useCallback","instance","findDOMNode","onBlurVisible"],"sources":["C:/Users/Administrator/Documents/GitHub/notation_app/node_modules/@material-ui/core/esm/utils/focusVisible.js"],"sourcesContent":["// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nvar hadKeyboardEvent = true;\r\nvar hadFocusVisibleRecently = false;\r\nvar hadFocusVisibleRecentlyTimeout = null;\r\nvar inputTypesWhitelist = {\r\n  text: true,\r\n  search: true,\r\n  url: true,\r\n  tel: true,\r\n  email: true,\r\n  password: true,\r\n  number: true,\r\n  date: true,\r\n  month: true,\r\n  week: true,\r\n  time: true,\r\n  datetime: true,\r\n  'datetime-local': true\r\n};\r\n/**\r\n * Computes whether the given element should automatically trigger the\r\n * `focus-visible` class being added, i.e. whether it should always match\r\n * `:focus-visible` when focused.\r\n * @param {Element} node\r\n * @return {boolean}\r\n */\r\n\r\nfunction focusTriggersKeyboardModality(node) {\r\n  var type = node.type,\r\n      tagName = node.tagName;\r\n\r\n  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {\r\n    return true;\r\n  }\r\n\r\n  if (tagName === 'TEXTAREA' && !node.readOnly) {\r\n    return true;\r\n  }\r\n\r\n  if (node.isContentEditable) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n/**\r\n * Keep track of our keyboard modality state with `hadKeyboardEvent`.\r\n * If the most recent user interaction was via the keyboard;\r\n * and the key press did not include a meta, alt/option, or control key;\r\n * then the modality is keyboard. Otherwise, the modality is not keyboard.\r\n * @param {KeyboardEvent} event\r\n */\r\n\r\n\r\nfunction handleKeyDown(event) {\r\n  if (event.metaKey || event.altKey || event.ctrlKey) {\r\n    return;\r\n  }\r\n\r\n  hadKeyboardEvent = true;\r\n}\r\n/**\r\n * If at any point a user clicks with a pointing device, ensure that we change\r\n * the modality away from keyboard.\r\n * This avoids the situation where a user presses a key on an already focused\r\n * element, and then clicks on a different element, focusing it with a\r\n * pointing device, while we still think we're in keyboard modality.\r\n */\r\n\r\n\r\nfunction handlePointerDown() {\r\n  hadKeyboardEvent = false;\r\n}\r\n\r\nfunction handleVisibilityChange() {\r\n  if (this.visibilityState === 'hidden') {\r\n    // If the tab becomes active again, the browser will handle calling focus\r\n    // on the element (Safari actually calls it twice).\r\n    // If this tab change caused a blur on an element with focus-visible,\r\n    // re-apply the class when the user switches back to the tab.\r\n    if (hadFocusVisibleRecently) {\r\n      hadKeyboardEvent = true;\r\n    }\r\n  }\r\n}\r\n\r\nfunction prepare(ownerDocument) {\r\n  ownerDocument.addEventListener('keydown', handleKeyDown, true);\r\n  ownerDocument.addEventListener('mousedown', handlePointerDown, true);\r\n  ownerDocument.addEventListener('pointerdown', handlePointerDown, true);\r\n  ownerDocument.addEventListener('touchstart', handlePointerDown, true);\r\n  ownerDocument.addEventListener('visibilitychange', handleVisibilityChange, true);\r\n}\r\n\r\nexport function teardown(ownerDocument) {\r\n  ownerDocument.removeEventListener('keydown', handleKeyDown, true);\r\n  ownerDocument.removeEventListener('mousedown', handlePointerDown, true);\r\n  ownerDocument.removeEventListener('pointerdown', handlePointerDown, true);\r\n  ownerDocument.removeEventListener('touchstart', handlePointerDown, true);\r\n  ownerDocument.removeEventListener('visibilitychange', handleVisibilityChange, true);\r\n}\r\n\r\nfunction isFocusVisible(event) {\r\n  var target = event.target;\r\n\r\n  try {\r\n    return target.matches(':focus-visible');\r\n  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError\r\n  // we use our own heuristic for those browsers\r\n  // rethrow might be better if it's not the expected error but do we really\r\n  // want to crash if focus-visible malfunctioned?\r\n  // no need for validFocusTarget check. the user does that by attaching it to\r\n  // focusable events only\r\n\r\n\r\n  return hadKeyboardEvent || focusTriggersKeyboardModality(target);\r\n}\r\n/**\r\n * Should be called if a blur event is fired on a focus-visible element\r\n */\r\n\r\n\r\nfunction handleBlurVisible() {\r\n  // To detect a tab/window switch, we look for a blur event followed\r\n  // rapidly by a visibility change.\r\n  // If we don't see a visibility change within 100ms, it's probably a\r\n  // regular focus change.\r\n  hadFocusVisibleRecently = true;\r\n  window.clearTimeout(hadFocusVisibleRecentlyTimeout);\r\n  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {\r\n    hadFocusVisibleRecently = false;\r\n  }, 100);\r\n}\r\n\r\nexport function useIsFocusVisible() {\r\n  var ref = React.useCallback(function (instance) {\r\n    var node = ReactDOM.findDOMNode(instance);\r\n\r\n    if (node != null) {\r\n      prepare(node.ownerDocument);\r\n    }\r\n  }, []);\r\n  return {\r\n    isFocusVisible: isFocusVisible,\r\n    onBlurVisible: handleBlurVisible,\r\n    ref: ref\r\n  };\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}